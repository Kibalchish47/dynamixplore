name: Run Tests

# This tells GitHub to run the workflow on every push to the `main` branch,
# and also on every pull request that targets the `main` branch.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    # This job will run on three different operating systems to ensure your
    # code is cross-platform compatible.
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', "3.13"] # Test against multiple Python versions

    runs-on: ${{ matrix.os }} # Use the OS from the matrix

    steps:
      # 1. Checks out your repository's code so the job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Sets up the specific version of Python from the matrix.
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Sets up the Rust toolchain.
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # 4. Install Python dependencies, including the testing tools.
      #    It's good practice to have a requirements_dev.txt for this.
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-benchmark scipy nolds
          pip install maturin 
        # The tool to build your Rust extension

      # 5. Build the Rust extension module so it can be imported by pytest.
      - name: Build Rust extension
        run: maturin develop

      # 6. Run the test suite using pytest.
      - name: Run pytest
        run: pytest